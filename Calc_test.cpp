/*
Автор: Игонин Владимир Юрьевич ИВТ-23
Часть модуля, файл содержащий заголовки функций и тела функций для вычисления сторон, периметра, площади треугольника, проверка существования треугольника и проверкой достоверности функций
*/

//библиотека C++ с функцией с инструментом отладки(для assert)
#include <cassert>
//библиотека C++ с функциями общих математических операций и преобразований(для sqrt и abs)
#include <cmath>
//Создаем пространство имен для модуля(пространство имен позволяет группировать индентификаторы в отдельные области, что помогает избегать конфликта имен)
namespace Geometry
{
/// Функция проверки существования треугольника
/// sideA, sideB, sideC - длины сторон треугольника
bool CheckTriangle(float sideA,float sideB,float sideC)
{
    if ((sideA+sideB<=sideC)||(sideB+sideC<=sideA)||(sideA+sideC<=sideB)) // если сумма двух сторон треугольника меньше или равна третьей стороне
    {
        return false; // треугольник не существует
    }
    else // если сумма двух сторон треугольника больше третьей стороне
    {
        return true; // треугольник существует
    }
}

/// Функция вычисления стороны треугольника
/// x1, y1, x2, y2 - координаты вершин треугольника
double CalcSide(float x1, float y1, float x2, float y2)
{
    return sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))); // Возвращает длину стороны треугольника по формуле
}

/// Функция вычисления периметра треугольника
/// sideA, sideB, sideC - длины сторон треугольника
double CalcP(float sideA, float sideB, float sideC)
{
    return sideA+sideB+sideC; // Возвращает сумму трех сторон треугольника(периметр)
}

/// Функция вычисления площади треугольника
/// sideA, sideB, sideC - длины сторон треугольника, Perimeter - периметр треугольника
double CalcS(float sideA, float sideB, float sideC, float Perimeter)
{
    return sqrt((Perimeter/2)*((Perimeter/2)-sideA)*((Perimeter/2)-sideB)*((Perimeter/2)-sideC)); // Возвращает периметр треугольника по формуле Герона
}

/// Функция проверки достоверности самостоятельно написанных функции
void test()
{
    // assert - функция, оценивающая выражение, которое передается ей в качестве аргумента, через параметр expression
    // Если выражение ложно, то записывается сообщение об ошибке и работа программы прекращается
    assert(CheckTriangle(0, 0, 0)==false); // Три проверки на достоверность функции проверки существования треугольника
    assert(CheckTriangle(1, 1, 1)==true);
    assert(CheckTriangle(6, 5, 4)==true);

    assert(abs(CalcSide(-12, -3, -17, -1)-5.385)<0.001); // Три проверки на достоверность функции вычисления стороны треугольника(|результат функции-ожидаемый результат|<погрешность вычисления)
    assert(abs(CalcSide(-12, -3, -8, -15)-12.649)<0.001);
    assert(abs(CalcSide(-17, -1, -8, -15)-16.643)<0.001);

    assert(abs(CalcP(6.324, 5, 3.605)-14.93)<0.01); // Три проверки на достоверность функции вычисления периметра треугольника(|результат функции-ожидаемый результат|<погрешность вычисления)
    assert(abs(CalcP(10.44, 8.062, 11.662)-30.164)<0.01);
    assert(abs(CalcP(16.643, 12.649, 5.385)-34.677)<0.01);

    assert(abs(CalcS(6.324, 5, 3.605, 14.93)-9)<0.01); // Три проверки на достоверность функции вычисления площади треугольника(|результат функции-ожидаемый результат|<погрешность вычисления)
    assert(abs(CalcS(10.44, 8.062, 11.662, 30.164)-41)<0.01);
    assert(abs(CalcS(16.643, 12.649, 5.385, 34.677)-26)<0.01);
}
}